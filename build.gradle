buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://repo.spongepowered.org/maven" }
        maven { url = "https://plugins.gradle.org/m2" }

    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.4"
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: "com.github.johnrengelman.shadow"
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

ext.configFile = file "gradle.properties"

configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group = config.group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "ForgedCarpet"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = config.mappings_version
    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    ext.mod_version = "${config.mod_version}"

    replaceIn "utils/Reference.java"
    replace "@MOD_VERSION@", mod_version

    replace '@FINGERPRINT@', project.findProperty('signSHA1')

    coreMod = 'carpet.forge.core.CarpetCore'

    def args = [
            "-Dfml.coreMods.load=carpet.forge.core.CarpetCore",
            "-Dmixin.hotSwap=true",
            "-Dmixin.checks.interfaces=true",
            "-Dmixin.debug.export=true",
            "-Dmixin.debug.verbose=true",
            "-Dmixin.debug.countInjections=true"
    ]
    clientJvmArgs.addAll(args)
    serverJvmArgs.addAll(args)
}

repositories {
    maven { url = "http://repo.spongepowered.org/maven" }
}

sourceSets {
    main {
        refMap = "mixins.carpet.refmap.json"
    }
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: "asm-commons"
        exclude module: "asm-tree"
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "log4j-core"
        exclude module: "gson"
        exclude module: "commons-io"
    }

    compile "org.jetbrains.java.decompiler:fernflower:sponge-SNAPSHOT"

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "mod_version", project.minecraft.mod_version
    inputs.property "minecraft_version", project.config.minecraft_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'mod_version': project.minecraft.mod_version, 'minecraft_version': project.config.minecraft_version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}


shadowJar {
    exclude "dummyThing"
    exclude "LICENSE.txt"

    dependencies {
        include(dependency("org.spongepowered:mixin"))
    }

    classifier ""
}

build.dependsOn(shadowJar)

reobf {
    shadowJar {
        mappingType = "SEARGE"
        classpath = sourceSets.main.compileClasspath

    }
}

jar {
    manifest.attributes(
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'FMLCorePluginContainsFMLMod': 'true',
            'ForceLoadAsMod': 'true',
            'FMLAT': 'fc1122_at.cfg'
    )
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran.
build.dependsOn signJar

